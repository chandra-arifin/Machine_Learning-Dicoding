# -*- coding: utf-8 -*-
"""Med_Submission2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GLinusb8nSVCGQGz0bB-pTNwubNlkdwp

# Profile

Nama : Chandra Arifin <br/>
Project : Submission 2 <br/>
Machine Learning (Intermediate)

# Import Libraries
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

"""# Baca File dan Hapus Kolom"""

#variable untuk dipakai di kolom Data Frame
kolomTemp = "Mean Temp (C)"
kolomTgl = "Date/Time"

# baca dataset movies
df = pd.read_csv('Toronto.csv')

#tampilkan record yang ada
df.head()

#penghapusan kolom yang tidak dipakai
df = df.drop(columns=['Year',	'Month', 'Day',	'Max Temp (C)',	'Min Temp (C)',
                      'Total Rain (mm)',	'Total Snow (cm)',	'Total Precip (mm)', 'season'])

df.isnull().sum()

#hapus yang N/A
df = df.dropna()

df.duplicated().sum()

df.info()

df[kolomTgl]=pd.to_datetime(df[kolomTgl]).dt.date

df.info()

"""# Pelatihan"""

tgl = df[kolomTgl].values
temperatur = df[kolomTemp].values

plt.figure(figsize=(20,5))
plt.plot(tgl, temperatur)
plt.title('Temperature average', fontsize=20);

data_latih, data_test, val_latih, val_test = train_test_split(temperatur, tgl, test_size=0.2, shuffle=False)

print('Jumlah Data Train : ',len(data_latih))
print('Jumlah Data Test : ',len(data_test))
print('Jumlah Value Train : ',len(val_latih))
print('Jumlah Value Test : ',len(val_test))

data_latih

val_latih

"""
# Pembuatan Callback"""

threshold_mae = (df[kolomTemp].max() - df[kolomTemp].min()) * 10/100

print(threshold_mae)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<threshold_mae and logs.get('val_mae')<threshold_mae):
      print("\nMae model < 10% data")
      self.model.stop_training = True
callbacks = myCallback()

"""# Pembuatan Model"""

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

data_latih_baru = windowed_dataset(data_latih, window_size=128, batch_size=100, shuffle_buffer=1000)
data_test_baru = windowed_dataset(data_test, window_size=128, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5,
                      strides=1, padding="causal",
                      activation="relu",
                      input_shape=[None, 1]),
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

learning_rate = 0.01
decay = 1e-6
momentum = 0.9
nesterov = True
optimizer = tf.keras.optimizers.legacy.SGD (lr=learning_rate, decay=decay, momentum=momentum, nesterov=nesterov)

model.compile(loss=tf.keras.losses.Huber(), optimizer=optimizer, metrics=["mae"])

history = model.fit(data_latih_baru, epochs=100, validation_data=data_test_baru, callbacks=[callbacks], verbose=2)

# history = model.fit(data_latih_baru, epochs=100, verbose=2)

"""# Pembuatan Grafik"""

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Mae Model')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()